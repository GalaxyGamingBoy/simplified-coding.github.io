---
import Layout from "../../../layouts/Layout.astro";

const getLessons = async (language: string): Promise<any> => {
    switch (language) {
        case "python":
            return Astro.glob("../../lessons/python/*.mdx");
        case "html":
            return Astro.glob("../../lessons/html/*.mdx");
        case "css":
            return Astro.glob("../../lessons/css/*.mdx");
        case "javascript":
            return Astro.glob("../../lessons/javascript/*.mdx");
    }
};

const lessons = await getLessons(Astro.params.lang || "python");

const content = lessons.filter((e: { frontmatter: any }) => {
    return e.frontmatter.id == Astro.url.searchParams.get("lesson");
})[0];
---

<Layout>
    <div>
        <link
            rel="stylesheet"
            href="https://pyscript.net/latest/pyscript.css"
        />
        <script defer src="https://pyscript.net/latest/pyscript.js"></script>
    </div>

    <py-script output="console-code" id="pyscript">print("HELLO")</py-script>
    <div class="parentEditor">
        <div class="guide">
            <content.Content />
        </div>
        <div class="editor" id="editor"></div>
        <div class="console" data-bs-theme="dark">
            <ul class="nav nav-tabs">
                <li class="nav-item">
                    <button class="nav-link active" id="console-btn"
                        >Κονσόλα</button
                    >
                </li>
                <li class="nav-item">
                    <button class="nav-link" id="preview-btn"
                        >Προεσκόπιση</button
                    >
                </li>
                <li class="nav-item">
                    <button class="btn btn-success m-1" id="run-btn"
                        >Τρέξε!</button
                    >
                </li>
            </ul>
            <div id="console-div" style="width:100%; height:100%">
                <code id="console-code"></code>
            </div>
            <div
                id="preview-div"
                style="width:100%; height:100%; color:white"
                hidden
            >
            </div>
        </div>
    </div>
</Layout>

<script>
    import { basicSetup } from "codemirror";
    import { javascript } from "@codemirror/lang-javascript";
    import { python } from "@codemirror/lang-python";
    import { html } from "@codemirror/lang-html";
    import { css } from "@codemirror/lang-css";

    import { keymap, EditorView } from "@codemirror/view";
    import { indentWithTab } from "@codemirror/commands";
    import { oneDark } from "@codemirror/theme-one-dark";

    // URL
    const language = location.pathname.split("/")[2];

    // Tabs
    const consoleBTN = document.getElementById("console-btn");
    const previewBTN = document.getElementById("preview-btn");
    const consoleDIV = document.getElementById("console-div");
    const previewDIV = document.getElementById("preview-div");

    consoleBTN?.addEventListener("click", () => {
        if (consoleBTN.className.indexOf("nav-link active") == -1)
            consoleBTN.className = consoleBTN.className.replace(
                "nav-link",
                "nav-link active"
            );

        if (previewBTN) {
            previewBTN.className = previewBTN.className.replace(
                "nav-link active",
                "nav-link"
            );
        }

        if (consoleDIV && previewDIV) {
            consoleDIV.hidden = false;
            previewDIV.hidden = true;
        }
    });

    previewBTN?.addEventListener("click", () => {
        if (previewBTN?.className.indexOf("nav-link active") == -1)
            previewBTN.className = previewBTN.className.replace(
                "nav-link",
                "nav-link active"
            );

        if (consoleBTN) {
            consoleBTN.className = consoleBTN.className.replace(
                "nav-link active",
                "nav-link"
            );
        }

        if (consoleDIV && previewDIV) {
            consoleDIV.hidden = true;
            previewDIV.hidden = false;
        }
    });

    const decideLanguage = (lang: string): any => {
        switch (lang) {
            case "python":
                return python();
            case "javascript":
                return javascript();
            case "html":
                return html();
            case "css":
                return html();
            default:
                return javascript();
        }
    };

    // Editor
    let editor = new EditorView({
        extensions: [
            basicSetup,
            decideLanguage(language),
            keymap.of([indentWithTab]),
            oneDark,
        ],
        parent: document.querySelector("#editor") as Element,
    });

    // Inject Custom Console Log
    // @ts-expect-error
    console.stdlog = console.log.bind(console);

    // @ts-expect-error
    console.logs = [];

    console.log = function () {
        // @ts-expect-error
        console.logs.push(Array.from(arguments));

        // @ts-expect-error
        console.stdlog.apply(console, arguments);
    };

    // Run Console
    const runButton = document.getElementById("run-btn");
    const consoleCode = document.getElementById("console-code");

    runButton?.addEventListener("click", async () => {
        // If editor is in javascript language
        if (language == "javascript") {
            // Clear Function
            // @ts-expect-error
            console.logs = [];

            // Run Function with Editor Code
            const f = new Function(editor.state.doc.toString());
            f();

            // Clear Console Output
            let consoleOutput = "";

            // Set Console Output
            // @ts-expect-error
            console.logs.forEach((e) => (consoleOutput += `> ${e[0]}\n`));
            if (consoleCode) {
                consoleCode.innerText = consoleOutput;
            }
        } else if (language == "html") {
            // If Editor HTML
            if (previewDIV) {
                previewDIV.innerHTML = editor.state.doc.toString();
            }
        } else if (language == "python") {
            // Clean console
            if (consoleCode) {
                consoleCode.innerText = "";
                console.log(editor.state.doc.toString())
            }
            // If editor is python
            const pyscript = document.createElement("py-script");
            pyscript.id = "py-exec";
            pyscript.setAttribute("output", "console-code");
            pyscript.innerText = editor.state.doc.toString();
            document.body.appendChild(pyscript);
            document.body.removeChild(pyscript);
        }
    });
</script>

<style>
    .parentEditor {
        display: flex;
        height: 80vh;
        width: 100%;
        border: 1px solid #000;
    }

    .guide {
        flex-grow: 1;
        resize: horizontal;
        overflow: auto;
        border: 2px solid #000;
        width: 55%;

        color: white;
        background-color: #282f36;
    }

    .editor {
        flex-grow: 3;
        height: auto;
        width: 100%;

        resize: horizontal;
        overflow: auto;
    }

    .console {
        flex-grow: 1;
        width: 30%;

        resize: horizontal;
        overflow: auto;

        background-color: #282f36;
    }
</style>
